import treelib
import json
import treelib
import json
import treelib
import json
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json '
f = open('json_file_name')
nested_json = json.load(f)
print(nested_json)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json '
f = open('json_file_name')
nested_json = json.load(f)
print(nested_json)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json '
f = open('json_file_name')
nested_json = json.load(f)
print(nested_json)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open('json_file_name')
nested_json = json.load(f)
print(nested_json)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f)
print(nested_json)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n_char = 100 # number of characters to display from beginning and end of dictionary
print(nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n_char = 10 # number of characters to display from beginning and end of dictionary
print(nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 10 # number of items to display from beginning and end of dictionary
print('dictionary: \n. ', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 10 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
print nested_json
print(nested_json)
[print(i) for i in nested_json]
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
nested_json = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Generate tree of variables
if "children" in output_json:
children = output_json["children"]
if "children" in children:
children1 = children["children"]
if "children" in children1:
children2 = children1["children"]
if "name" in children2:
name = children2["name"]
if "Ids" in children2:
ids = children2["Ids"]
print name, ids
dict = {'hey': 'hey', 'ho': 'ho'}
prind(dict)
print(dict)
for item in dict:
print(item)
item.keys
item.keys()
item = dict({'hey': 2, 'ho', 3})
item = {'hey': 2, 'ho', 3}
item = {"hey": 2, "ho", 3}
item = {'hey': 2, 'ho', 3}
item = {"One" : 7, "Two" : 10, "Three" : 45, "Four" : 23, "Five" : 77 }
for i in items:
print(i)
for i in item:
print(item)
for key in item.keys():
print(itme[key])
for key in item.keys():
print(item[key])
for key in item.keys():
item[key]
for key in item.keys():
item[str(key)]
d.keys()
# Generate tree of variables
tree = Tree()  # initialize tree
tree.create_node(tag='Top', identifier='Top')
check = [] # Initialize queue of items to be checked as a list
item_list = data_dict.keys()
# Iterate through each level to check which children belong to which parent
for item in item_list:
item_has_children = 'fields' in data_dict['item']
if item_has_children:
print(data_dict['item'].id, ' has children')
else:
print(data_dict['item'].id, ' does not have children)
import treelib
import json
# Generate tree of variables
tree = Tree()  # initialize tree
tree.create_node(tag='Top', identifier='Top')
check = [] # Initialize queue of items to be checked as a list
item_list = data_dict.keys()
# Iterate through each level to check which children belong to which parent
for item in item_list:
item_has_children = 'fields' in data_dict['item']
if item_has_children:
print(data_dict['item'].id, ' has children')
else:
print(data_dict['item'].id, ' does not have children)
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = 'recruitment_participants_schema.json'
f = open(json_file_name)
data_dict = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Generate tree of variables
tree = Tree()  # initialize tree
tree.create_node(tag="Top", identifier="Top")
check = [] # Initialize queue of items to be checked as a list
item_list = data_dict.keys()
# Iterate through each level to check which children belong to which parent
for item in item_list:
item_has_children = "fields" in data_dict["item"]
if item_has_children:
print(data_dict["item"].id, " has children")
else:
print(data_dict["item"].id, " does not have children"")
# Import dependencies
import treelib
import json
# Import nested json data file
json_file_name = "recruitment_participants_schema.json""
f = open(json_file_name)
data_dict = json.load(f) # Load json data as a dictionary
# Display part of dictionary
dot = '\n\t\t\t\t.\n'
n = 5 # number of items to display from beginning and end of dictionary
print('dictionary: \n\n', nested_json[0:n_char], dot, dot, dot, nested_json[-n_char:-1])
# Generate tree of variables
tree = Tree()  # initialize tree
tree.create_node(tag="Top", identifier="Top")
check = [] # Initialize queue of items to be checked as a list
item_list = data_dict.keys()
# Iterate through each level to check which children belong to which parent
for item in item_list:
item_has_children = "fields" in data_dict["item"]
if item_has_children:
print(data_dict["item"].id, " has children")
else:
print(data_dict["item"].id, " does not have children"")
knitr::opts_chunk$set(echo = TRUE)
library(googleCloudRunner)
cr_setup()
1
1
0
library(bigrquery)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
0
1
library(bigrquery)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table, bigint = "integer64")
# Generate contents of report
head(rec_data)             # Example table for report
hist(table$RcrtUP_Age_v1r0)    # Plot for report
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table)
# Generate contents of report
head(rec_data)             # Example table for report
hist(table$RcrtUP_Age_v1r0)    # Plot for report
# Generate contents of report
head(rec_data)                             # Example table for report
hist(as.numeric(table$RcrtUP_Age_v1r0))    # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
grid.table(test_report_table)                      # Write table to PDF
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(test_report_table)                  # Write table to PDF
print(p)                                       # Write histogram to PDF
dev.off()                                      # Close PDF
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(t)                  # Write table to PDF
print(p)                                       # Write histogram to PDF
dev.off()                                      # Close PDF
# Generate contents of report
t <- head(rec_data)
df <- data.frame(as.numeric(table$RcrtUP_Age_v1r0)) # Example table for report
p <- ggplot(df, aes(x=weight)) + geom_histogram(bins=5)   # Plot for report
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(t)                                  # Write table to PDF
print(p)                                       # Write histogram to PDF
dev.off()                                      # Close PDF
#}
grid.table(t)                                  # Write table to PDF
library(bigrquery)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table)
# Generate contents of report
t <- head(rec_data)
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(t)                                  # Write table to PDF
dev.off()                                      # Close PDF
# library(googleCloudStorageR)
library(gridExtra)
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(t)                                  # Write table to PDF
dev.off()                                      # Close PDF
library(bigrquery)
# library(googleCloudStorageR)
library(gridExtra)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
0
0
# Authentication
bq_auth()
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table)
# Generate contents of report
t <- head(rec_data)
# Make Report
pdf('./report_table.pdf')                      # Open a PDF
grid.table(t)                                  # Write table to PDF
dev.off()                                      # Close PDF
# Make Report
pdf('report_table.pdf')                      # Open a PDF
grid.table(t)                                  # Write table to PDF
dev.off()                                      # Close PDF
library(bigrquery)
library(googleCloudStorageR)
# library(googleCloudStorageR)
library(gridExtra)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
gcs_setup()
1
plumber::plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
output_file   <- paste0("CCC_Model_Metrics_",
format(Sys.time(), "%m_%d_%Y_%H_%M"),
".pdf")
output_file
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
output_file   <- paste0("CCC_Model_Metrics_",
format(Sys.time(), "%m_%d_%Y_%H_%M"),
".pdf")
output_file
help gcs_upload()
help gcs_upload
help(gcs_upload)
output_file.type()
typeof(output_file)
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
plumb(file='Documents/analyticsPiplelines/CCCModelMetrics/ccc_model_metrics_api.R')$run()
